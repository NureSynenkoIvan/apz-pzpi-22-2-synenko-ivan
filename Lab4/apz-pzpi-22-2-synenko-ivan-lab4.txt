Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
до лабораторної роботи 4 з дисципліни
"Архітектура програмного забезпечення"
на тему: "РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ МОБІЛЬНОГО КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ"








Виконав ст. гр ПЗПІ-22-2
Синенко Іван Костянтинович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович






Харків 2025
 
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	08.06
	1.0
	Створено документ
	

2 ЗАВДАННЯ        
Метою роботи є розробити мобільний клієнт програмної системи.


3 ОПИС ВИКОНАНОЇ РОБОТИ
        Для створення було обрано мову Kotlin і базові бібліотеки Android. Також для розсилки пуш-повідомлень був обраний сервіс Firebase Messaging Service.
        Далі було розроблено базові активності для входу у систему. Запити до серверу з них були протестовані. Після цього я перейшов до створення базового функціоналу наступних екранів. Під час розробки був використаний об’єктно-орієнтований підхід і елементи компонентної архітектури – всі екрани у частині застосунку, що працює після логіну, наслідують від BaseAfterLoginActivity, що дозволяє їм мати однакову стандартизовану логіку нижнього меню, авторизація відбувається через сінглтон-об’єкт AuthService, а активності, де можна змінити мову, мають імплементують  LanguageSelectionDialogFragment.OnLanguageSelectedListener, що дозволяє централізовано міняти мову застосунку.
        Надсилання інформації на сервер відбувається по протоколу HTTPS і кастомний HostNameVerifier забезпечує те, що підтримуються лише запити до серверу, який підтримує конкретно наш сертефікат безпеки (який розповсюджується разом з застосунком).
        Для отримання інформації з серверу використовується Firebase Messaging Service (FMS). Під час ініціаплізації застосунок реєструється у Firebase Messaging Service і отримує FMS-токен, який під час логіну надсилає на сервер. Сервер у свій час зберігає токени FMS у мапі разом з користувачами, що дозволяє надсилати запити саме конкретним мобільним клієнтам. 
Також через  FMS можна відправляти до мобільних клієнтів запит на отримання геолокації – треба лише сформулювати запит, який є спеціальною командою. 
        
        
4 ВИСНОВКИ


Протягом лабораторної роботи було створено мобільний клієнт для програмної системи. 
________________


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/e9XDhDxnqEo
Хронологічний опис відеозапису:
00:55 - Вхід з QR-кодом
01:33 - Інтернаціоналізація
02:01 - Вхід з QR-кодом (завершення) 
02:36 - Вхід і зміни на сервері 
03:37 - Доставлення повідомлень за допомогою Firebase Cloud Messaging
04:08 - FCM-токен, прихід повідомлення про тривогу
05:40 - Інформація про місцезнаходження по запиту
07:18 - Вихід з системи, що відстежується на бекенді






________________


ДОДАТОК Б
UML-діаграми
  

Рисунок Б.1 – UML-діаграма прецедентів




  

Рисунок Б.2 – UML-діаграма компонентів




  

Рисунок Б.3 – UML діаграма станів
________________
ДОДАТОК В
Фрагменти коду 
В.1 Отримання геопозиції користувачів через FCM
                GitHub репозиторій: https://github.com/NureSynenkoIvan/apz-pzpi-22-2-synenko-ivan/tree/main/Lab4/Server(Notification%20module)/notification/notifiers/impl/firebase/geolocation  
                Лістинг 1 – Контроллер отримання геопозиції 
  package com.bastionserver.notification.notifiers.impl.firebase.geolocation;


import com.bastionserver.employees.model.Coordinates;
import com.bastionserver.employees.model.Employee;
import com.bastionserver.employees.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;


import java.util.*;
import java.util.concurrent.ConcurrentHashMap;


import static java.lang.Thread.sleep;


@RestController
@RequestMapping("/geo")
public class FirebaseGeolocationController {
    private static final int AWAIT_TIME_MILLIS = 10000;
    private static Set<Employee> employees = new HashSet<>();
    private FirebaseGeolocationService geolocationService;
    private ConcurrentHashMap<Employee, String> activeFCMTokens;
    @Autowired
    public FirebaseGeolocationController(FirebaseGeolocationService geolocationService, ConcurrentHashMap activeFCMTokens) {
        this.geolocationService = geolocationService;
        this.activeFCMTokens = activeFCMTokens;
    }


    @GetMapping
    @Secured({"ROLE_dispatcher", "ROLE_administrator"})
    public Set<Employee> getLocatedEmployees() throws InterruptedException {
        geolocationService.locateEmployees();
        sleep(AWAIT_TIME_MILLIS);
        return employees;
    }


    @PostMapping
    public ResponseEntity<Object> postLocationData(@RequestParam String fcmToken,
                                                   @RequestParam double lat,
                                                   @RequestParam double lon) {
        Employee employee = getKey(activeFCMTokens, fcmToken);
        if (employee == null) throw new RuntimeException();
        employee.setLocation(new Coordinates(lat, lon));
        employees.add(employee);
        return ResponseEntity.ok().build();
    }


    public <K, V> K getKey(Map<K, V> map, V value) {
        for (Map.Entry<K, V> entry : map.entrySet()) {
            if (entry.getValue().equals(value)) {
                return entry.getKey();
            }
        }
        return null;
    }


}




В.2 Базовий клас активності
GitHub репозиторій: https://github.com/NureSynenkoIvan/apz-pzpi-22-2-synenko-ivan/blob/main/Lab4/MobileClient/app/src/main/java/com/example/bastionmobile/BaseAfterLoginActivity.kt  


Лістинг 2 - Базовий клас активності
package com.example.bastionmobile


import androidx.appcompat.app.AppCompatActivity


import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import com.example.bastionmobile.AuthService.clockOut
import com.google.android.material.bottomnavigation.BottomNavigationView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext




open class BaseAfterLoginActivity : AppCompatActivity() {
    protected lateinit var appPreferences: AppPreferences


    protected var currentPhoneNumber: String? = null
    protected var currentPassword: String? = null


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        appPreferences = AppPreferences(this)


        val userInfo = appPreferences.getUserInfo()
        currentPhoneNumber = userInfo?.phoneNumber
        currentPassword = userInfo?.password
    }


    protected fun setupBottomNavigationView(bottomNav: BottomNavigationView) {
        bottomNav.setOnItemSelectedListener { item ->
            when (item.itemId) {
                R.id.navigation_user -> {
                    if (this !is SelfInformationActivity) {
                        startActivity(Intent(this, SelfInformationActivity::class.java))
                        finish()
                    }
                    true
                }


                R.id.navigation_alarms -> {
                    if (this !is AlertInformationActivity) {
                        startActivity(Intent(this, AlertInformationActivity::class.java))
                        finish()
                    }
                    true
                }


                R.id.navigation_logout -> {
                    performLogout()
                    true
                }


                else -> false
            }
        }
    }


    protected fun performLogout() {
        val userInfo = appPreferences.getUserInfo()
        currentPhoneNumber = userInfo?.phoneNumber
        currentPassword = userInfo?.password


        if (currentPhoneNumber == null || currentPassword == null) {
            Toast.makeText(
                this,
                getString(R.string.toast_logout_credentials_missing),
                Toast.LENGTH_LONG
            ).show()
            finalizeLogout()
            return
        }


        CoroutineScope(Dispatchers.IO).launch {
            val clockOutSuccess = try {
                clockOut(currentPhoneNumber!!, appPreferences.getUnhashedPassword())
            } catch (e: Exception) {
                Log.e("BaseActivity", "Clock out failed: ${e.message}", e)
                false
            }


            withContext(Dispatchers.Main) {
                if (clockOutSuccess) {
                    Toast.makeText(
                        this@BaseAfterLoginActivity,
                        getString(R.string.toast_logout_successful),
                        Toast.LENGTH_SHORT
                    ).show()
                } else {
                    Toast.makeText(
                        this@BaseAfterLoginActivity,
                        getString(R.string.toast_logout_failed),
                        Toast.LENGTH_LONG
                    ).show()
                }
                finalizeLogout()
            }
        }
    }


    protected fun finalizeLogout() {
        appPreferences.clearUserInfo() // USING AppPreferences
        val intent = Intent(this, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        startActivity(intent)
        finishAffinity()
    }
}