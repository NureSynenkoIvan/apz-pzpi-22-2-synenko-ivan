Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
до лабораторної роботи 3 з дисципліни
"Архітектура програмного забезпечення"
на тему: "РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ"








Виконав ст. гр ПЗПІ-22-2
Синенко Іван Костянтинович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович






Харків 2025
 
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	04.06
	1.0
	Створено документ
	2
	07.06
	2.0
	Додано зміни часу а також кілометрів і міль
	

2 ЗАВДАННЯ        
Метою роботи є розробити клієнтську / front-end частину програмної системи.


3 ОПИС ВИКОНАНОЇ РОБОТИ
        
        Для створення був обраний фреймворк react, адже він дозволив визначати компоненти, які застосовуються в багатьох місцях, організовуючи таким чином код, дозволяв використовувати змінні стану, а також підтримував парадигму реактивного програмування, що дуже добре підійшла до програмування фронтенд-клієнту, адже вона наближена до того, як користувач взаємодіє з застосунком. 
        У якості архітектури була обрана модульна архітектура, що дозволила організовувати код за функціональністю.
        У даному веб-застосунку доступні перегляд інформації про користувачів і пристрої, додання, видалення, і змінення цієї інформації про них, відображення у реальному часі мапи з визначеними на ній об’єктами (переданими з серверу), а також для адміністратора – підняття тривоги за натисканням на кнопку, виклик функцій резервного копіювання і відкату бази даних до певної версії, яка обирається за часом.
Веб-застосунок взаємодіє з ендпоінтами серверного застосунку. Серверний застосунок взаємодіє з ІоТ-клієнтом і також з мобільним клієнтом (хоча на момент виконання цієї роботи мобільний клієнт не є розробленим).   
        Також була реалізована інтернаціоналізація за допомогою бібліотеки i18next, що дозволила згрупувати текст за локалями і міняти їх по мірі необхідності. Локаль представляє собою об’єкт, що десериалізується з JSON-файлу. Цей об’єкт – по суті таблиця пар ключ-значення, де у значеннях також можуть бути об’єкти, що дозволяє організовувати тексти так, як потрібно. Я використовував структуру Файл – назви сторінок або категорій – конкретний текст. Реалізовані були українська і англійська локалі. Спосіб, яким реалізована функціональність, дозволяє легко і швидко створювати нові локалі.
Для стилів були застосовані html+css.
Для безпеки підключення і користувацьких даних програма застосовує https замість http. 
Також було реалізовано відображення дистанції від точки, яку потрібно захищати (вона задається у файлі конфігурації) з перерахуванням дистанції у кілометри або мілі. Підрахунок дистанції відбувається за допомогою формули гаверсинуса (haversine), після чого переводиться в кілометри або милі.
Також було реалізовано переведення часу змін працівників у потрібний часовий пояс. Часовий пояс, у якому знаходяться працівники, задається точкою, яку потрібно захищати (вона задається у файлі конфігурації).
        
        
4 ВИСНОВКИ


Протягом лабораторної роботи було створено веб-клієнт для програмної системи. 
________________


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/B2bDASbkcqk 
Хронологічний опис відеозапису:
00:40 - Безпека даних
01:00 - Функціонал диспетчеру
02:32 - Зміна часу відображення
03:00 - QR-код 
04:11 - Стан неба (показ у реальному часі)
05:18 - Налаштування міль/кілометрів
06:35 - Інтернаціоналізація
07:34 - Функціонал адміністратору
09:37 - Резервне копіювання бази даних 
09:52 - Відновлення з резервної копії
________________


ДОДАТОК Б
UML-діаграми
  

Рисунок Б.1 – UML-діаграма прецедентів




  

Рисунок Б.2 – UML-діаграма компонентів


  



Рисунок Б.3 – UML діаграма діяльності




________________


ДОДАТОК В
Фрагменти коду 
В.1 Математична обробка прикладних даних
                GitHub репозиторій: https://github.com/NureSynenkoIvan/apz-pzpi-22-2-synenko-ivan/blob/main/Lab3/bastion-webclient/src/components/Pages/SkyStateViewer.js  
                Лістинг 1 – Функція гаверсинуса для дистанції на земній кулі
  function haversine(lat1, lon1, lat2, lon2, unit='km') {
    let rad 
    switch (unit) {
      case 'mi':
        rad = 3958.8; //Radius of Earth in miles
        break;
      case 'km':
      default: 
        rad = 6371 //Radius of Earth in km
        break;
    }


    let dLat = (lat2 - lat1) * Math.PI / 180.0;
        let dLon = (lon2 - lon1) * Math.PI / 180.0;
          
        lat1 = (lat1) * Math.PI / 180.0;
        lat2 = (lat2) * Math.PI / 180.0;
        
        let a = Math.pow(Math.sin(dLat / 2), 2) + 
                   Math.pow(Math.sin(dLon / 2), 2) * 
                   Math.cos(lat1) * 
                   Math.cos(lat2);
        let c = 2 * Math.asin(Math.sqrt(a));
        return rad * c;


    }








В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureSynenkoIvan/apz-pzpi-22-2-synenko-ivan/blob/main/Lab3/bastion-webclient/src/components/Pages/ArchivePage.js  


Лістинг 2 - Функціональність резервного копіювання  і відновлення
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';


const ArchivePage = () => {
  const { t } = useTranslation();
  const [isLoading, setIsLoading] = useState(false);
  const [restoreDate, setRestoreDate] = useState('');
  const [availableBackups, setAvailableBackups] = useState([]);


  const getAuthHeader = () => {
    const phone = localStorage.getItem('userPhoneNumber');
    const password = localStorage.getItem('userPassword');
    return 'Basic ' + btoa(`${phone}:${password}`);
  };


  useEffect(() => {
    const fetchBackups = async () => {
      try {
        const response = await fetch('http://localhost:8080/archive', {
          method: 'GET',
          headers: {
            'Authorization': getAuthHeader()
          }
        });
        const data = await response.json(); 
        setAvailableBackups(data);
      } catch (error) {
        console.error(t('archive.fetchBackupsError'), error);
      }
    };


    fetchBackups();
  }, [t]);


  const handleBackup = async () => {
    if (!window.confirm(t('archive.confirmBackup'))) return;


    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:8080/archive', {
        method: 'POST',
        headers: {
          'Authorization': getAuthHeader()
        }
      });


      if (response.ok) {
        alert(t('archive.backupSuccess'));
      } else {
        alert(t('archive.backupError'));
      }
    } catch (error) {
      alert(t('archive.genericError', { message: error.message }));
    } finally {
      setIsLoading(false);
    }
  };


  const formatDateForRestore = (dateString) => {
    const date = new Date(dateString);


    const pad = (n) => n.toString().padStart(2, '0');


    return `${date.getFullYear()}_${pad(date.getMonth() + 1)}_${pad(date.getDate())}_${pad(date.getHours())}_${pad(date.getMinutes())}_${pad(date.getSeconds())}`;
  };


  const handleRestore = async () => {
    if (!window.confirm(t('archive.confirmRestore'))) return;


    if (!restoreDate) {
      alert(t('archive.selectDatePrompt'));
      return;
    }




    setIsLoading(true);
    alert(restoreDate)
    try {
      const response = await fetch(`http://localhost:8080/archive/restore?date=${formatDateForRestore(restoreDate)}`, {
        method: 'POST',
        headers: {
          'Authorization': getAuthHeader()
        }
      });


      if (response.ok) {
        alert(t('archive.restoreSuccess'));
      } else {
        alert(t('archive.restoreError'));
      }
    } catch (error) {
      alert(t('archive.genericError', { message: error.message }));
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <div className="archive-page">
      <h2>{t('archive.title')}</h2>


      <button onClick={handleBackup} disabled={isLoading}>
        {t('archive.createBackupButton')}
      </button>


      <div style={{ marginTop: '1em' }}>
        <label>
          {t('archive.restoreFromBackupLabel')}:
          <select
            value={restoreDate}
            onChange={(e) => setRestoreDate(e.target.value)}
            style={{ marginLeft: '1em' }}
          >
            <option value="">{t('archive.selectBackupDateOption')}</option>
            {availableBackups.map((isoDate) => (
              <option key={isoDate} value={isoDate}>
                {new Date(isoDate).toLocaleString()}
              </option>
            ))}
          </select>
        </label>


        <button
          onClick={handleRestore}
          disabled={isLoading || !restoreDate}
          style={{ marginLeft: '1em' }}
        >
          {t('archive.restoreButton')}
        </button>
      </div>
    </div>
  );
};


export default ArchivePage;




В.3 Інші фрагменти коду
GitHub репозиторій: https://github.com/NureSynenkoIvan/apz-pzpi-22-2-synenko-ivan/blob/main/Lab3/bastion-webclient/src/components/AlarmStatus.js 


Лістинг 3 - Компонент AlarmStatus.js
import React, { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';


const AlarmStatus = () => {
  const { t } = useTranslation();
  const [alarmData, setAlarmData] = useState({ isAlarm: false });


  useEffect(() => {
    const fetchAlarm = async () => {
      const storedPhoneNumber = localStorage.getItem('userPhoneNumber');
      const storedPassword = localStorage.getItem('userPassword');
      const credentials = btoa(`${storedPhoneNumber}:${storedPassword}`);


      try {
        const response = await fetch('http://localhost:8080/alarm', {
          method: 'GET',
          headers: {
            Authorization: `Basic ${credentials}`,
          },
        });
        const data = await response.json();
        setAlarmData(data);
      } catch (error) {
        console.error(t('alarmStatus.fetchError'), error);
      }
    };


    fetchAlarm();
    const interval = setInterval(fetchAlarm, 1000); 


    return () => clearInterval(interval);
  }, [t]);


  return (
    <div className="alarm-status">
      <h2>{t('alarmStatus.title')}</h2>
      <p>
        {alarmData.isAlarm ? (
          <span style={{ color: 'red' }}>🔴 {t('alarmStatus.active')}</span>
        ) : (
          <span style={{ color: 'green' }}>🟢 {t('alarmStatus.inactive')}</span>
        )}
      </p>
    </div>
  );
};


export default AlarmStatus;